// <auto-generated />
using System;
using MentalDepths.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalDepths.Data.Migrations
{
    [DbContext(typeof(MentalDepthsDbContext))]
    [Migration("20230729142106_ImplementedAplicanttable2")]
    partial class ImplementedAplicanttable2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentalDepths.Data.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Aplicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("JobApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialisations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobApplicationId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Aplicants");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Apointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasPassed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Apointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("247a7f62-3cfb-4d10-94b5-b94bb5a32e57"),
                            Address = "Office",
                            ApplicationUserId = new Guid("010d67b6-964d-4248-9c9a-ad83215eaa4a"),
                            DateAndTime = new DateTime(2023, 8, 1, 17, 21, 5, 980, DateTimeKind.Local).AddTicks(9596),
                            HasPassed = false,
                            SpecialistId = new Guid("33713803-661e-4fad-a041-cf526fbc83e4")
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f957a45a-d8df-439e-a50a-b1c0f87a69f2"),
                            AccessFailedCount = 0,
                            CityId = 2,
                            ConcurrencyStamp = "45001be7-b70e-49c3-b786-aa8e4a14fb41",
                            CreatedOn = new DateTime(2023, 7, 29, 17, 21, 5, 980, DateTimeKind.Local).AddTicks(9768),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gogo_5a@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOGO_5A@ABV.BG",
                            NormalizedUserName = "GEORGI GEORGIEV",
                            PasswordHash = "AIfehdEePFGruLqvNdRCXzvJejy+PFHoO9aQXCEkcLzMLNlRm1+vAAftedyWWNOMlQ==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Lyubenov",
                            SecurityStamp = "71b4c35f-6248-444c-a8d5-d0cd953f10c9",
                            TwoFactorEnabled = false,
                            UserName = "Georgi Georgiev"
                        },
                        new
                        {
                            Id = new Guid("010d67b6-964d-4248-9c9a-ad83215eaa4a"),
                            AccessFailedCount = 0,
                            CityId = 5,
                            ConcurrencyStamp = "dc74593a-e1e9-4566-a7df-2e0513ea10f2",
                            CreatedOn = new DateTime(2023, 7, 29, 17, 21, 5, 981, DateTimeKind.Local).AddTicks(4368),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ScaryHaxer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Iliq",
                            IsDeleted = false,
                            LastName = "Steliov",
                            LockoutEnabled = false,
                            NormalizedEmail = "SCARYHAXER@GMAIL.COM",
                            NormalizedUserName = "ILIQ STELIOV",
                            PasswordHash = "AE5zyD8LrHdBC80+q0dU9z+MsHar8rgZSnbjdAWuq5Yox0rhaorBTj8srJ05SKl6RQ==",
                            PhoneNumberConfirmed = false,
                            SecondName = "",
                            SecurityStamp = "08850da2-f0c8-4ff0-96c7-913c18d96997",
                            TwoFactorEnabled = false,
                            UserName = "Iliq Steliov"
                        },
                        new
                        {
                            Id = new Guid("308508b8-ce9e-470b-a122-8a77f576532e"),
                            AccessFailedCount = 0,
                            CityId = 27,
                            ConcurrencyStamp = "b499db2d-9176-4197-b4dd-acdc86a64176",
                            CreatedOn = new DateTime(2023, 7, 29, 17, 21, 5, 981, DateTimeKind.Local).AddTicks(8787),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ivan.Ivanov234@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN.IVANOV234@GMAIL.COM",
                            NormalizedUserName = "IVAN IVANOV",
                            PasswordHash = "AB2zjtiEUVqu6TP6b/8ESZBpzTKXuBBgM5E4Y6pBSmnkkiWLAl+8Z+51g01yMp47iA==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Sirov",
                            SecurityStamp = "3c72a36c-e5b9-4bd1-b056-7ba012ba6f55",
                            TwoFactorEnabled = false,
                            UserName = "Ivan Ivanov"
                        },
                        new
                        {
                            Id = new Guid("9953dce8-25f6-45f2-bf8c-816b92bb0e28"),
                            AccessFailedCount = 0,
                            CityId = 13,
                            ConcurrencyStamp = "cfff9de7-a056-4b5f-beaf-a9a349c9881e",
                            CreatedOn = new DateTime(2023, 7, 29, 17, 21, 5, 982, DateTimeKind.Local).AddTicks(3211),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lilial_Izbora@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Lilial",
                            IsDeleted = false,
                            LastName = "Izbrannikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILIAL_IZBORA@ABV.BG",
                            NormalizedUserName = "LILIAL IZBRANNIKOV",
                            PasswordHash = "AL4ZxR55xBNsTHtL0mpmmol7qhlv5/qfMI54PzlxE146+t4MBfyHcYmmlO5pRPn10Q==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Sabiev",
                            SecurityStamp = "0a2cc2e9-0180-4238-8f5c-5fd92a011820",
                            TwoFactorEnabled = false,
                            UserName = "Lilial Izbrannikov"
                        },
                        new
                        {
                            Id = new Guid("59a88704-3ae3-4554-ad39-81b1f0304069"),
                            AccessFailedCount = 0,
                            CityId = 22,
                            ConcurrencyStamp = "afe17e98-36ad-4228-9e99-0a5aaf3bd465",
                            CreatedOn = new DateTime(2023, 7, 29, 17, 21, 5, 982, DateTimeKind.Local).AddTicks(7685),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Kolio_Zemev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikola",
                            IsDeleted = false,
                            LastName = "Zemelyarski",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLIO_ZEMEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLA ZEMELYARSKI",
                            PasswordHash = "AOu+XSk9fuKKuEAIIcmqWMkElcN7MCFeg86iaER9lAHFY7FkWh0H6Yxy4f8w8Osxwg==",
                            PhoneNumberConfirmed = false,
                            SecondName = "",
                            SecurityStamp = "50c23a36-c8fb-487c-8531-d034dc301ab3",
                            TwoFactorEnabled = false,
                            UserName = "Nikola Zemelyarski"
                        },
                        new
                        {
                            Id = new Guid("a63c570e-8c25-449f-b89c-3df89bc0d17c"),
                            AccessFailedCount = 0,
                            CityId = 17,
                            ConcurrencyStamp = "9861f401-16cb-4643-a7c7-d268136dcbf7",
                            CreatedOn = new DateTime(2023, 7, 29, 17, 21, 5, 983, DateTimeKind.Local).AddTicks(2103),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Sasunionios_loliolios@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Dembe",
                            IsDeleted = false,
                            LastName = "Redglade",
                            LockoutEnabled = false,
                            NormalizedEmail = "SASUNIONIOS_LOLIOLIOS@ABV.BG",
                            NormalizedUserName = "DEMBE REDGLADE",
                            PasswordHash = "AH7RbJaDvbKnnDT7qnJWXVGmvcfAIRTR801ypGGkstEMvW4ztK9lVRslGjX24z3eRQ==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Nisantimetarottebe",
                            SecurityStamp = "b36e24e9-878d-4f30-a11b-5c2550ce9f60",
                            TwoFactorEnabled = false,
                            UserName = "Dembe Redglade"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = ""
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kardzhali"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pazardzhik"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Silistra"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Smolyan"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sofia City"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Sofia (province)"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Vidin"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Yambol"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialistId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.JobApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Certification")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ScannedDiploma")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("JobApplicationForms");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfSend")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationtId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAOneTimePrescription")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialisations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Psychiatrist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adolescent psycology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Prepubescent psycology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Post-war trauma"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Abnormal psychology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Biological psychology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cognitive psychology "
                        },
                        new
                        {
                            Id = 8,
                            Name = "Developmental psychology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Forensic psychology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Counselling psychology"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Industrial-organizational psychology"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Forensic psychology"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Personality psychology"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Social psychology"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Specialists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            Address = "AlenMak bl.14 vh.6",
                            Age = 23,
                            Description = "Talanted, young and abnormaly ambitious she will obliterate your expectations!",
                            ImageURL = "https://images.pexels.com/photos/3538028/pexels-photo-3538028.jpeg?cs=srgb&dl=pexels-jeys-tubianosa-3538028.jpg&fm=jpg",
                            UserId = new Guid("308508b8-ce9e-470b-a122-8a77f576532e")
                        },
                        new
                        {
                            Id = new Guid("33713803-661e-4fad-a041-cf526fbc83e4"),
                            Address = "ul.\"Sergei Kirov\" vh.34",
                            Age = 56,
                            Description = "Talanted, not so young and rather slackish he will obliterate your expectations(in a bad way)!",
                            ImageURL = "https://images.pexels.com/photos/1936854/pexels-photo-1936854.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500",
                            UserId = new Guid("59a88704-3ae3-4554-ad39-81b1f0304069")
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.SpecialistSpecialisation", b =>
                {
                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpecialisationId")
                        .HasColumnType("int");

                    b.HasKey("SpecialistId", "SpecialisationId");

                    b.HasIndex("SpecialisationId");

                    b.ToTable("SpecialistsSpecialisations");

                    b.HasData(
                        new
                        {
                            SpecialistId = new Guid("33713803-661e-4fad-a041-cf526fbc83e4"),
                            SpecialisationId = 8
                        },
                        new
                        {
                            SpecialistId = new Guid("33713803-661e-4fad-a041-cf526fbc83e4"),
                            SpecialisationId = 4
                        },
                        new
                        {
                            SpecialistId = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            SpecialisationId = 13
                        },
                        new
                        {
                            SpecialistId = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            SpecialisationId = 6
                        },
                        new
                        {
                            SpecialistId = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            SpecialisationId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Admin", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Aplicant", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.JobApplicationForm", "JobApplication")
                        .WithOne("Aplicant")
                        .HasForeignKey("MentalDepths.Data.Models.Aplicant", "JobApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("JobApplication");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Apointment", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Apointments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Apointments")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.City", "City")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Conversation", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Conversations")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "User")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Message", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Note", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Conversation", "Conversation")
                        .WithOne("Note")
                        .HasForeignKey("MentalDepths.Data.Models.Note", "ConversationtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Prescription", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Prescriptions")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialist", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.SpecialistSpecialisation", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Specialisation", "Specialisation")
                        .WithMany("Specialists")
                        .HasForeignKey("SpecialisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Specialisations")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialisation");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalDepths.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Apointments");

                    b.Navigation("Conversations");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.City", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Note")
                        .IsRequired();
                });

            modelBuilder.Entity("MentalDepths.Data.Models.JobApplicationForm", b =>
                {
                    b.Navigation("Aplicant")
                        .IsRequired();
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialisation", b =>
                {
                    b.Navigation("Specialists");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialist", b =>
                {
                    b.Navigation("Apointments");

                    b.Navigation("Conversations");

                    b.Navigation("Prescriptions");

                    b.Navigation("Specialisations");
                });
#pragma warning restore 612, 618
        }
    }
}

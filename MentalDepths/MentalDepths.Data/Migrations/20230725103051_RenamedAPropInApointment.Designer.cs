// <auto-generated />
using System;
using MentalDepths.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalDepths.Data.Migrations
{
    [DbContext(typeof(MentalDepthsDbContext))]
    [Migration("20230725103051_RenamedAPropInApointment")]
    partial class RenamedAPropInApointment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentalDepths.Data.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d947f5ab-75ae-4ebe-9f26-9af2671d77ac"),
                            UserId = new Guid("f957a45a-d8df-439e-a50a-b1c0f87a69f2"),
                            Username = "Big Boss"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.AdminJobApplicationMT", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId", "JobApplicationId");

                    b.HasIndex("JobApplicationId");

                    b.ToTable("AdminJobApplicationMT");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Apointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasPassed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Apointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("247a7f62-3cfb-4d10-94b5-b94bb5a32e57"),
                            Address = "Office",
                            ApplicationUserId = new Guid("010d67b6-964d-4248-9c9a-ad83215eaa4a"),
                            DateAndTime = new DateTime(2023, 7, 28, 13, 30, 51, 374, DateTimeKind.Local).AddTicks(3326),
                            HasPassed = false,
                            SpecialistId = new Guid("33713803-661e-4fad-a041-cf526fbc83e4")
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f957a45a-d8df-439e-a50a-b1c0f87a69f2"),
                            AccessFailedCount = 0,
                            CityId = 2,
                            ConcurrencyStamp = "2a6ee73c-a13a-4115-a503-6c7294ebd862",
                            CreatedOn = new DateTime(2023, 7, 25, 13, 30, 51, 374, DateTimeKind.Local).AddTicks(3448),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gogo_5a@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOGO_5A@ABV.BG",
                            NormalizedUserName = "GEORGI GEORGIEV",
                            PasswordHash = "AAreF+9NChbO/folRLcRq5S406QSeW/v+RouJ8byblwK8sZVMl58rHzdAyKx8PPCuQ==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Lyubenov",
                            SecurityStamp = "bd04c87f-16b4-4767-8d96-0820dfc7626a",
                            TwoFactorEnabled = false,
                            UserName = "Georgi Georgiev"
                        },
                        new
                        {
                            Id = new Guid("010d67b6-964d-4248-9c9a-ad83215eaa4a"),
                            AccessFailedCount = 0,
                            CityId = 5,
                            ConcurrencyStamp = "cd063a6b-cc50-4142-813e-bda9ce70a765",
                            CreatedOn = new DateTime(2023, 7, 25, 13, 30, 51, 374, DateTimeKind.Local).AddTicks(8057),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ScaryHaxer@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Iliq",
                            IsDeleted = false,
                            LastName = "Steliov",
                            LockoutEnabled = false,
                            NormalizedEmail = "SCARYHAXER@YAHOO.COM",
                            NormalizedUserName = "ILIQ STELIOV",
                            PasswordHash = "ACVM7cZrUTzkHdt0D1CSZqlvSuN2W4C1thucb2sFxVc8Y5v/aFVXakdrrQPXAxdLiA==",
                            PhoneNumberConfirmed = false,
                            SecondName = "",
                            SecurityStamp = "be0c6242-0473-4a9e-9902-a2f20c29fc10",
                            TwoFactorEnabled = false,
                            UserName = "Iliq Steliov"
                        },
                        new
                        {
                            Id = new Guid("308508b8-ce9e-470b-a122-8a77f576532e"),
                            AccessFailedCount = 0,
                            CityId = 27,
                            ConcurrencyStamp = "b77be76d-1837-4661-a732-7e206fe1630f",
                            CreatedOn = new DateTime(2023, 7, 25, 13, 30, 51, 375, DateTimeKind.Local).AddTicks(2514),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ivan.Ivanov234@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN.IVANOV234@GMAIL.COM",
                            NormalizedUserName = "IVAN IVANOV",
                            PasswordHash = "AN2go2mwOKwwds1q5lxUqgxJHm/RTtQGGxtYgnjgYjmJZSSvOCASv6pGdziuAWdcMw==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Sirov",
                            SecurityStamp = "a6c8c5ac-696d-4103-84e3-f5cb1534cc14",
                            TwoFactorEnabled = false,
                            UserName = "Ivan Ivanov"
                        },
                        new
                        {
                            Id = new Guid("9953dce8-25f6-45f2-bf8c-816b92bb0e28"),
                            AccessFailedCount = 0,
                            CityId = 13,
                            ConcurrencyStamp = "dda733bd-72f0-4bb5-a55e-0d7d54b1ebda",
                            CreatedOn = new DateTime(2023, 7, 25, 13, 30, 51, 375, DateTimeKind.Local).AddTicks(6946),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lilial_Izbora@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Lilial",
                            IsDeleted = false,
                            LastName = "Izbrannikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILIAL_IZBORA@ABV.BG",
                            NormalizedUserName = "LILIAL IZBRANNIKOV",
                            PasswordHash = "ADexlP6JBbCs/ttbdQmFSwesV35sRzjoartW0CwbCVMVvBoUenfTccSMy13oyjYF3A==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Sabiev",
                            SecurityStamp = "72e4b961-934a-4954-bda9-f9568635ebc3",
                            TwoFactorEnabled = false,
                            UserName = "Lilial Izbrannikov"
                        },
                        new
                        {
                            Id = new Guid("59a88704-3ae3-4554-ad39-81b1f0304069"),
                            AccessFailedCount = 0,
                            CityId = 22,
                            ConcurrencyStamp = "6ed4cd89-34c6-458a-9441-788ba704da84",
                            CreatedOn = new DateTime(2023, 7, 25, 13, 30, 51, 376, DateTimeKind.Local).AddTicks(1443),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Kolio_Zemev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikola",
                            IsDeleted = false,
                            LastName = "Zemelyarski",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLIO_ZEMEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLA ZEMELYARSKI",
                            PasswordHash = "APkQNxtnwEZH+3Sg5XZsItqTM5PzdHn5nkrgkVtDtBN3sSyMjT938LZvlG+0sziduA==",
                            PhoneNumberConfirmed = false,
                            SecondName = "",
                            SecurityStamp = "7f506934-0507-497d-a2ba-c40859a99d99",
                            TwoFactorEnabled = false,
                            UserName = "Nikola Zemelyarski"
                        },
                        new
                        {
                            Id = new Guid("a63c570e-8c25-449f-b89c-3df89bc0d17c"),
                            AccessFailedCount = 0,
                            CityId = 17,
                            ConcurrencyStamp = "030ab307-ee7d-4807-ba8d-93c89f45be4f",
                            CreatedOn = new DateTime(2023, 7, 25, 13, 30, 51, 376, DateTimeKind.Local).AddTicks(5876),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DembeRed@alo.net",
                            EmailConfirmed = false,
                            FirstName = "Dembe",
                            IsDeleted = false,
                            LastName = "Redglade",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMBERED@ALO.NET",
                            NormalizedUserName = "DEMBE REDGLADE",
                            PasswordHash = "AKhqSOzxPbffMRQSmd/18We2rTUjigNfT072cp6NpXkQtrlxbPqjWJwokjqCSB+Ypg==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Nisantimetarottebe",
                            SecurityStamp = "676e0587-bcf2-4312-a133-f367ee893912",
                            TwoFactorEnabled = false,
                            UserName = "Dembe Redglade"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = ""
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kardzhali"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pazardzhik"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Silistra"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Smolyan"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sofia City"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Sofia (province)"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Vidin"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Yambol"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialistId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.JobApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Certification")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ScannedDiploma")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialistId")
                        .IsUnique();

                    b.ToTable("JobApplicationForms");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfSend")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationtId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAOneTimePrescription")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialisations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Psychiatrist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adolescent psycology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Prepubescent psycology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Post-war trauma"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Abnormal psychology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Biological psychology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cognitive psychology "
                        },
                        new
                        {
                            Id = 8,
                            Name = "Developmental psychology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Forensic psychology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Counselling psychology"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Industrial-organizational psychology"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Forensic psychology"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Personality psychology"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Social psychology"
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("JobApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Specialists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            Address = "AlenMak bl.14 vh.6",
                            Age = 23,
                            Description = "Talanted, young and abnormaly ambitious she will obliterate your expectations!",
                            ImageURL = "https://images.pexels.com/photos/3538028/pexels-photo-3538028.jpeg?cs=srgb&dl=pexels-jeys-tubianosa-3538028.jpg&fm=jpg",
                            JobApplicationId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("308508b8-ce9e-470b-a122-8a77f576532e")
                        },
                        new
                        {
                            Id = new Guid("33713803-661e-4fad-a041-cf526fbc83e4"),
                            Address = "ul.\"Sergei Kirov\" vh.34",
                            Age = 56,
                            Description = "Talanted, not so young and rather slackish he will obliterate your expectations(in a bad way)!",
                            ImageURL = "https://images.pexels.com/photos/1936854/pexels-photo-1936854.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500",
                            JobApplicationId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("59a88704-3ae3-4554-ad39-81b1f0304069")
                        });
                });

            modelBuilder.Entity("MentalDepths.Data.Models.SpecialistSpecialisation", b =>
                {
                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpecialisationId")
                        .HasColumnType("int");

                    b.HasKey("SpecialistId", "SpecialisationId");

                    b.HasIndex("SpecialisationId");

                    b.ToTable("SpecialistsSpecialisations");

                    b.HasData(
                        new
                        {
                            SpecialistId = new Guid("33713803-661e-4fad-a041-cf526fbc83e4"),
                            SpecialisationId = 8
                        },
                        new
                        {
                            SpecialistId = new Guid("33713803-661e-4fad-a041-cf526fbc83e4"),
                            SpecialisationId = 4
                        },
                        new
                        {
                            SpecialistId = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            SpecialisationId = 13
                        },
                        new
                        {
                            SpecialistId = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            SpecialisationId = 6
                        },
                        new
                        {
                            SpecialistId = new Guid("550184af-0284-4a1c-bc3e-223cb9198e62"),
                            SpecialisationId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Admin", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.AdminJobApplicationMT", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Admin", "Admin")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.JobApplicationForm", "JobApplicationForm")
                        .WithMany("Admins")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("JobApplicationForm");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Apointment", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Apointments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Apointments")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.City", "City")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Conversation", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Conversations")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "User")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.JobApplicationForm", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithOne("JobApplication")
                        .HasForeignKey("MentalDepths.Data.Models.JobApplicationForm", "SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Message", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Note", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Conversation", "Conversation")
                        .WithOne("Note")
                        .HasForeignKey("MentalDepths.Data.Models.Note", "ConversationtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Prescription", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Prescriptions")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialist", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.SpecialistSpecialisation", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.Specialisation", "Specialisation")
                        .WithMany("Specialists")
                        .HasForeignKey("SpecialisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.Specialist", "Specialist")
                        .WithMany("Specialisations")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialisation");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MentalDepths.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Admin", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Apointments");

                    b.Navigation("Conversations");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.City", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Note")
                        .IsRequired();
                });

            modelBuilder.Entity("MentalDepths.Data.Models.JobApplicationForm", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialisation", b =>
                {
                    b.Navigation("Specialists");
                });

            modelBuilder.Entity("MentalDepths.Data.Models.Specialist", b =>
                {
                    b.Navigation("Apointments");

                    b.Navigation("Conversations");

                    b.Navigation("JobApplication")
                        .IsRequired();

                    b.Navigation("Prescriptions");

                    b.Navigation("Specialisations");
                });
#pragma warning restore 612, 618
        }
    }
}
